name: Release
on:
  push:
    branches:
      - main

jobs:
  createTag:
    runs-on: ubuntu-latest

    outputs:
      tag: ${{ steps.get_tag.outputs.value }}
    steps:
      - uses: actions/checkout@v3
      - name: get specified property
        id: "get_tag"
        uses: zoexx/github-action-json-file-properties@release
        with:
          file_path: "./src-tauri/tauri.conf.json"
          prop_path: "package.version"

      - uses: rickstaa/action-create-tag@v1
        id: "tag_create"
        with:
          tag: ${{steps.get_tag.outputs.value}}
          tag_exists_error: true
          message: "Latest release"

      # Print result using the action output.
      - run: |
          echo "Tag already present: ${{ steps.tag_create.outputs.tag_exists }}"

  release:
    needs: createTag
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        # You can remove libayatana-appindicator3-dev if you don't use the system tray feature.
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Sync node version and setup cache
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"
          cache: "yarn" # Set this to npm, yarn or pnpm.

      - name: Install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: yarn install # Change this to npm, yarn or pnpm.

      - name: Build the app
        uses: tauri-apps/tauri-action@v0

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ vars.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ vars.TAURI_KEY_PASSWORD }}
        with:
          tagName: ${{ needs.createTag.outputs.tag }} # This only works if your workflow triggers on new tags.
          releaseName: "App Name ${{ needs.createTag.outputs.tag }}" # tauri-action replaces \_\_VERSION\_\_ with the app version.
          releaseBody: "See the assets to download and install this version."
          releaseDraft: false
          prerelease: false
